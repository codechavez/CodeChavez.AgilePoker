@page "/"
@using CodeChavez.AgilePoker.DTOs
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager _navManager
@inject IJSRuntime JS
@inject ISnackbar Snackbar

<PageTitle>Agile Poker</PageTitle>

<HeadContent>
    <title>Agile Poker | Planning Poker for Scrum Teams</title>
    <meta name="description" content="Agile Poker is a planning poker tool that helps Scrum teams estimate story points collaboratively using gamified estimation techniques." />
    <meta name="keywords" content="Agile Poker, Planning Poker, Scrum, Story Point Estimation, Agile Estimation Tools, Blazor Agile Poker" />
    <meta property="og:title" content="Agile Poker | Planning Poker for Scrum Teams" />
    <meta property="og:description" content="Use Agile Poker to make collaborative estimations easier and more accurate with your Agile team. Free and open source!" />
    <meta property="og:type" content="website" />
    <meta property="og:url" content="https://codechavez-agilepoker.azurewebsites.net" />
</HeadContent>

<MudAppBar Elevation="1" Dense="true">
    <MudText>Agile Poker</MudText>
    <MudSpacer />
    <MudIconButton Color="Color.Inherit" Href="https://github.com/codechavez" Target="_blank" Style="padding:0;">
        <img src="/logos/codechavez.png" alt="CodeChavez" style="width:24px; height:24px;" />
    </MudIconButton>
</MudAppBar>

@if (!connected)
{
    <MudTextField T="string" Label="Player Name" Variant="Variant.Outlined" @bind-Value="playerName"
                  Placeholder="Enter your name"></MudTextField>
    <MudButton Variant="Variant.Filled" FullWidth="true" Color="Color.Primary" OnClick="Connect">Join</MudButton>
}
else
{
    <MudGrid>
        <MudItem xs="12">
                <MudStack Row="true" Spacing="5">
                    <MudTextField T="string"
                                  ReadOnly="@isReadOnlyPlayerName"
                                  Variant="Variant.Outlined"
                                  Adornment="Adornment.End"
                                  AdornmentIcon="@(isReadOnlyPlayerName ? @Icons.Material.Filled.Edit : Icons.Material.Filled.Save)"
                                  Label="Player"
                                  @bind-Value="playerName"
                                  OnAdornmentClick="@EditPlayName"
                                  OnBlur="@OnNameBlur">
                    </MudTextField>
                    <MudTextField T="string" Label="Invite players by sharing the URL below!"
                                  ReadOnly="true"
                                  Variant="Variant.Outlined" Adornment="Adornment.End"
                                  Value="@($"{_navManager.BaseUri}?session={sessionId}")"
                                  AdornmentIcon="@Icons.Material.Filled.ContentCopy"
                                  OnAdornmentClick="@CopyUrl">
                    </MudTextField>
                </MudStack>
        </MudItem>
        <MudItem xs="12"></MudItem>
        @if (isVotesRevealed)
        {
            <MudItem xs="12">
                <MudStack Spacing="5" AlignItems="AlignItems.Center" Class="align-center justify-center" Row="true">
                    <MudStack Spacing="5">
                        <MudText Align="Align.Center" Typo="Typo.h5">Average</MudText>
                        <MudPaper Class="pa-7 align-center justify-center mud-theme-secondary rounded-xl" Elevation="5">
                            <MudText Typo="Typo.h4">@averageVote</MudText>
                        </MudPaper>
                    </MudStack>
                </MudStack>
            </MudItem>
        }

        <MudItem xs="12">
            <MudStack Spacing="10">
                <MudPaper Elevation="0" Class="d-flex align-center justify-center mud-width-full">
                    @foreach (var p in players)
                    {
                        <MudStack Style="margin-right: 10px;">
                            <MudPaper Class="pa-7 align-center justify-center mud-theme-primary rounded-xl" Elevation="5">
                                <MudText Typo="Typo.h4">@GetVoteDisplay(p)</MudText>
                            </MudPaper>
                            <MudText Align="Align.Center" Typo="Typo.h6">@p.Name</MudText>
                        </MudStack>
                    }
                </MudPaper>
                <MudStack Row="true" class="align-center justify-center">
                    <MudButton Variant="Variant.Filled"
                               StartIcon="@(isVotesRevealed ? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff)"
                               OnClick="RevealVotes"
                               Color="Color.Primary">
                        Reveal
                    </MudButton>
                    <MudButton Variant="Variant.Filled"
                               StartIcon="@Icons.Material.Filled.Clear"
                               OnClick="ResetVotes">
                        Reset
                    </MudButton>
                </MudStack>
            </MudStack>
        </MudItem>
        <MudItem xs="12"></MudItem>
        <MudItem xs="12">
            <MudPaper Elevation="0" Class="d-flex align-center justify-center mud-width-full py-3">
                <MudText Typo="Typo.h5">👇 Pick your card! 👇</MudText>
            </MudPaper>
            <MudPaper Elevation="0" Class="d-flex align-center justify-center mud-width-full py-8">
                <MudStack Row="true">
                    @foreach (var card in cards)
                    {
                        <MudPaper Class="@GetCardClass(card)"
                                  @onclick="@(() => SendVote(card))"
                                  Style="cursor: pointer;" Elevation="5">
                            <MudText Typo="Typo.h4">@card</MudText>
                        </MudPaper>
                    }
                </MudStack>
            </MudPaper>
        </MudItem>
        <MudItem xs="12">
            <MudStack Spacing="5">
                <MudText Typo="Typo.h6">NOTE: If need an effort greater than 21, you probably have a different issue</MudText>
                <MudText Typo="Typo.h6">NOTE: If you refresh you will start over</MudText>
            </MudStack>
        </MudItem>
    </MudGrid>
}
@code {
    private string? selectedCard = null;
    private double averageVote = 0.0;
    private bool isReadOnlyPlayerName = true;
    private bool isVotesRevealed = false;
    private string sessionId = "";
    private HubConnection? hub;
    private string playerName = "";
    private bool connected = false;
    private List<PlayerVote> players = new();
    private readonly string[] cards = ["1", "2", "3", "5", "8", "13", "21", "?", "☕"];

    protected override void OnInitialized()
    {
        var uri = _navManager.ToAbsoluteUri(_navManager.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
        sessionId = query["session"] ?? Guid.NewGuid().ToString();

        if (!uri.Query.Contains("session"))
            _navManager.NavigateTo($"/?session={sessionId}", forceLoad: true);
    }

    private async Task Connect()
    {
        hub = new HubConnectionBuilder()
        .WithUrl(_navManager.ToAbsoluteUri("/pokerhub"))
        .WithAutomaticReconnect()
        .Build();

        hub.On<IEnumerable<PlayerVote>>("PlayersUpdated", (data) =>
        {
            players = data.ToList();
            CalculateAverage();
            InvokeAsync(StateHasChanged);
        });

        await hub.StartAsync();
        await hub.SendAsync("Join", sessionId, playerName);
        connected = true;
    }

    private async Task SendVote(string vote)
    {
        selectedCard = vote;
        await hub!.SendAsync("Vote", sessionId, vote);
    }

    private async Task RevealVotes()
    {
        isVotesRevealed = !isVotesRevealed;
        if (isVotesRevealed)
            await hub!.SendAsync("Reveal", sessionId);
        else
            await hub!.SendAsync("Hide", sessionId);
    }

    private async Task ResetVotes()
    {
        selectedCard = null;
        isVotesRevealed = false;
        await hub!.SendAsync("Reset", sessionId);
    }

    private string GetVoteDisplay(PlayerVote player) =>
    player.Revealed ? player.Vote : (player.HasVoted ? "🙈" : "💭");

    private string GetCardClass(string card)
    {
        return card == selectedCard ? "pa-8 mud-theme-primary rounded-xl poker-card selected" : "pa-8 mud-theme-primary rounded-xl poker-card";
    }

    private async Task CopyUrl()
    {
        var url = $"{_navManager.BaseUri}?session={sessionId}";
        await JS.InvokeVoidAsync("navigator.clipboard.writeText", url);
        Snackbar.Add("Copied to clipboard!", Severity.Success);
    }

    private async Task EditPlayName()
    {
        isReadOnlyPlayerName = !isReadOnlyPlayerName;
        if (isReadOnlyPlayerName && hub is not null)
        {
            await hub.SendAsync("UpdatePlayerName", sessionId, playerName);
        }
    }

    private async Task OnNameBlur()
    {
        if (!isReadOnlyPlayerName)
            return;

        if (hub is not null)
        {
            await hub.SendAsync("UpdatePlayerName", sessionId, playerName);
        }
    }

    private void CalculateAverage()
    {
        if (!isVotesRevealed)
        {
            averageVote = 0;
            return;
        }

        var numericVotes = players
            .Where(p => p.Revealed)
            .Select(p => p.Vote)
            .Where(v => double.TryParse(v, out _))
            .Select(v => double.Parse(v))
            .ToList();

        if (numericVotes.Count == 0)
        {
            averageVote = 0;
            return;
        }

        averageVote = Math.Round(numericVotes.Average(), 2);
    }
}