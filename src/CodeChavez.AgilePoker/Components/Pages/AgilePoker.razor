@page "/"
@using CodeChavez.AgilePoker.DTOs
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager _navManager
@inject IJSRuntime JS
@inject ISnackbar Snackbar

<PageTitle>Agile Poker</PageTitle>

<HeadContent>
    <title>Agile Poker | Planning Poker for Scrum Teams</title>
    <meta name="description" content="Agile Poker is a planning poker tool that helps Scrum teams estimate story points collaboratively using gamified estimation techniques." />
    <meta name="keywords" content="Agile Poker, Planning Poker, Scrum, Story Point Estimation, Agile Estimation Tools, Blazor Agile Poker" />
    <meta property="og:title" content="Agile Poker | Planning Poker for Scrum Teams" />
    <meta property="og:description" content="Use Agile Poker to make collaborative estimations easier and more accurate with your Agile team. Free and open source!" />
    <meta property="og:type" content="website" />
    <meta property="og:url" content="https://codechavez-agilepoker.azurewebsites.net" />
</HeadContent>

<MudAppBar Elevation="1" Dense="true">
    <MudText>Agile Poker</MudText>
    <MudSpacer />
    <MudButton Variant="Variant.Text"
               Color="Color.Error"
               OnClick="EndSession"
               StartIcon="@Icons.Material.Filled.Close"
               Style="margin-right: 15px;"
               Size="Size.Small">End Session</MudButton>

    <MudIconButton Color="Color.Inherit" Href="https://github.com/codechavez" Target="_blank" Style="padding:0;">
        <img src="/logos/codechavez.png" alt="CodeChavez" style="width:24px; height:24px;" />
    </MudIconButton>
</MudAppBar>

@if (!connected)
{
    <MudTextField T="string"
                  Label="Player Name"
                  Variant="Variant.Outlined" @bind-Value="playerName"
                  MaxLength="20"
                  Placeholder="Enter your name"></MudTextField>
    <MudButton Variant="Variant.Filled" FullWidth="true" Color="Color.Primary" OnClick="Connect">Join</MudButton>
}
else
{
    <MudGrid>
        <MudItem xs="12">
            <MudStack Row="true" Spacing="5">
                <MudTextField T="string"
                              ReadOnly="@isReadOnlyPlayerName"
                              Variant="Variant.Outlined"
                              Adornment="Adornment.End"
                              AdornmentIcon="@(isReadOnlyPlayerName ? @Icons.Material.Filled.Edit : Icons.Material.Filled.Save)"
                              Label="Player"
                              MaxLength="20"
                              @bind-Value="playerName"
                              OnAdornmentClick="@EditPlayName"
                              OnBlur="@OnNameBlur">
                </MudTextField>
                <MudTextField T="string" Label="Invite players by sharing the URL below!"
                              ReadOnly="true"
                              Variant="Variant.Outlined" Adornment="Adornment.End"
                              Value="@($"{_navManager.BaseUri}?session={sessionId}")"
                              AdornmentIcon="@Icons.Material.Filled.ContentCopy"
                              OnAdornmentClick="@CopyUrl">
                </MudTextField>
            </MudStack>
        </MudItem>
        <MudItem xs="12"></MudItem>
        @if (isVotesRevealed)
        {
            <MudItem xs="12">
                <MudStack Spacing="5" AlignItems="AlignItems.Center" Class="align-center justify-center" Row="true">
                    <MudStack Spacing="5">
                        <MudText Align="Align.Center" Typo="Typo.h5">Average</MudText>
                        <MudPaper Class="pa-9 align-center justify-center mud-theme-secondary rounded-l" Elevation="5">
                            <MudText Typo="Typo.h4">@averageVote</MudText>
                        </MudPaper>
                    </MudStack>
                </MudStack>
            </MudItem>
        }

        <MudItem xs="12">
            <MudStack Spacing="10" AlignItems="AlignItems.Center">
                <MudGrid Style="width: 600px;">
                    @foreach (var p in players)
                    {
                        <MudItem xs="12" sm="6" md="6" lg="2" xl="2">
                            <MudStack AlignItems="AlignItems.Center">
                                <MudPaper Class="mud-theme-primary" Style="width:75px;height:100px;" Elevation="5">
                                    <MudText Typo="Typo.h3" style="padding-top:20px;"
                                             Align="Align.Center">@GetVoteDisplay(p)</MudText>
                                </MudPaper>
                                <MudText Align="Align.Center" Typo="Typo.body2">@p.Name</MudText>
                            </MudStack>
                        </MudItem>
                    }
                </MudGrid>
                <MudStack Row="true" class="align-center justify-center">
                    <MudButton Variant="Variant.Filled"
                               StartIcon="@(isVotesRevealed ? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff)"
                               OnClick="RevealVotes"
                               Color="Color.Primary">
                        Reveal
                    </MudButton>
                    <MudButton Variant="Variant.Filled"
                               StartIcon="@Icons.Material.Filled.Clear"
                               OnClick="ResetVotes">
                        Reset
                    </MudButton>
                </MudStack>
            </MudStack>
        </MudItem>
        <MudItem xs="12"></MudItem>
        <MudItem xs="12">
            <MudPaper Elevation="0" Class="d-flex align-center justify-center mud-width-full py-3">
                <MudText Typo="Typo.h5">👇 Pick your card! 👇</MudText>
            </MudPaper>
            <MudPaper Elevation="0" Class="d-flex align-center justify-center mud-width-full py-8">
                <MudStack Row="true">
                    @foreach (var card in cards)
                    {
                        <MudPaper Class="@GetCardClass(card)"
                                  @onclick="@(() => SendVote(card))"
                                  Style="cursor: pointer;" Elevation="5">
                            <MudText Typo="Typo.h4">@card</MudText>
                        </MudPaper>
                    }
                </MudStack>
            </MudPaper>
        </MudItem>
        <MudItem xs="12">
            <MudStack Spacing="5">
                <MudText><b>Welcome</b> to this super lightweight Agile Poker. As such the functionality is very limited and specific to use Fibonacci numbers but only 
                    to 21 because let's the honest if you are efforting something above that, you probably need to break it down to smaller pieces. 
                    This application does not stores data it's all real time feeds.</MudText>
                <MudText><b>How to use</b></MudText>
                <MudText><b>1</b> Enter your name. When selecting a name please <b>Be Respecful. Be Kind.</b></MudText>
                <MudText><b>2</b> Feel free to share the link to have more piers joining.</MudText>
                <MudText><b>3</b> Select your effort and remember the ☕ emoji means I need a break.</MudText>
                <MudText><b>4</b> When ready to reveal, just one person click on the "Reveal" button.</MudText>
                <MudText><b>5</b> Remember to "Reset"" the vote for the next round.</MudText>

                <MudText Typo="Typo.h6">Term of Use: This is offer free of charge therefore, by using this application/website you are automatically releasing the author of ANY responsibility or liability.</MudText>
            </MudStack>
        </MudItem>
    </MudGrid>
}
@code {
    private string playerId = "";
    private bool initialized = false;
    private string? selectedCard = null;
    private double averageVote = 0.0;
    private bool isReadOnlyPlayerName = true;
    private bool isVotesRevealed = false;
    private string sessionId = "";
    private HubConnection? hub;
    private string playerName = "";
    private bool connected = false;
    private List<PlayerVote> players = new();
    private readonly string[] cards = ["1", "2", "3", "5", "8", "13", "21", "?", "☕"];

    protected override void OnInitialized()
    {
        var uri = _navManager.ToAbsoluteUri(_navManager.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
        sessionId = query["session"] ?? Guid.NewGuid().ToString();

        if (!uri.Query.Contains("session"))
            _navManager.NavigateTo($"/?session={sessionId}", forceLoad: true);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !initialized)
        {
            initialized = true;

            // Get session ID
            var uri = _navManager.ToAbsoluteUri(_navManager.Uri);
            var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
            sessionId = query["session"] ?? Guid.NewGuid().ToString();

            if (!uri.Query.Contains("session"))
                _navManager.NavigateTo($"/?session={sessionId}", forceLoad: true);

            // Get or create playerId
            playerId = await JS.InvokeAsync<string>("localStorage.getItem", "agilepoker_playerId");
            if (string.IsNullOrWhiteSpace(playerId))
            {
                playerId = Guid.NewGuid().ToString();
                await JS.InvokeVoidAsync("localStorage.setItem", "agilepoker_playerId", playerId);
            }

            // Get stored player name
            var storedName = await JS.InvokeAsync<string>("localStorage.getItem", "agilepoker_playerName");
            if (!string.IsNullOrWhiteSpace(storedName))
            {
                playerName = storedName;
                await Connect();
                StateHasChanged();
            }
        }
    }

    private async Task Connect()
    {
        if (string.IsNullOrWhiteSpace(playerName))
        {
            Snackbar.Add("Player name is required.", Severity.Warning);
            return;
        }


        await JS.InvokeVoidAsync("localStorage.setItem", "agilepoker_playerName", playerName);


        hub = new HubConnectionBuilder()
        .WithUrl(_navManager.ToAbsoluteUri("/pokerhub"))
        .WithAutomaticReconnect()
        .Build();


        hub.On<IEnumerable<PlayerVote>>("PlayersUpdated", (data) =>
        {
            players = data.ToList();
            CalculateAverage();
            InvokeAsync(StateHasChanged);
        });


        hub.On("SessionEnded", async () =>
        {
            await JS.InvokeVoidAsync("localStorage.removeItem", "agilepoker_playerName");
            connected = false;
            players.Clear();
            selectedCard = null;
            isVotesRevealed = false;
            averageVote = 0;
            Snackbar.Add("This session has ended.", Severity.Info);
            StateHasChanged();
        });


        await hub.StartAsync();
        await hub.SendAsync("Join", sessionId, playerName, playerId);
        connected = true;
    }


    private async Task SendVote(string vote)
    {
        selectedCard = vote;
        await hub!.SendAsync("Vote", sessionId, vote);
    }

    private async Task RevealVotes()
    {
        isVotesRevealed = !isVotesRevealed;
        if (isVotesRevealed)
            await hub!.SendAsync("Reveal", sessionId);
        else
            await hub!.SendAsync("Hide", sessionId);
    }

    private async Task ResetVotes()
    {
        selectedCard = null;
        isVotesRevealed = false;
        await hub!.SendAsync("Reset", sessionId);
    }

    private string GetVoteDisplay(PlayerVote player) =>
    player.Revealed ? player.Vote : (player.HasVoted ? "🙈" : "💭");

    private string GetCardClass(string card)
    {
        return card == selectedCard ? "pa-8 mud-theme-primary rounded-l poker-card selected" : "pa-8 mud-theme-primary rounded-l poker-card";
    }

    private async Task CopyUrl()
    {
        var url = $"{_navManager.BaseUri}?session={sessionId}";
        await JS.InvokeVoidAsync("navigator.clipboard.writeText", url);
        Snackbar.Add("Copied to clipboard!", Severity.Success);
    }

    private async Task EditPlayName()
    {
        isReadOnlyPlayerName = !isReadOnlyPlayerName;
        if (isReadOnlyPlayerName && hub is not null)
        {
            await hub.SendAsync("UpdatePlayerName", sessionId, playerName);
        }
    }

    private async Task OnNameBlur()
    {
        if (!isReadOnlyPlayerName)
            return;

        if (hub is not null)
        {
            await hub.SendAsync("UpdatePlayerName", sessionId, playerName);
        }
    }

    private void CalculateAverage()
    {
        if (!isVotesRevealed)
        {
            averageVote = 0;
            return;
        }

        var numericVotes = players
            .Where(p => p.Revealed)
            .Select(p => p.Vote)
            .Where(v => double.TryParse(v, out _))
            .Select(v => double.Parse(v))
            .ToList();

        if (numericVotes.Count == 0)
        {
            averageVote = 0;
            return;
        }

        averageVote = Math.Round(numericVotes.Average(), 2);
    }

    private async Task EndSession()
    {
        if (hub is not null)
        {
            await hub.SendAsync("EndSession", sessionId);
            Snackbar.Add("Session ended.", Severity.Success);
            _navManager.NavigateTo("/", forceLoad: true);
        }


    }
}